require("glmmTMB") &&
interactive()
)) {
data(sleepstudy)
data(Salamanders)
data(iris)
data(efc)
efc <- to_factor(efc, e42dep, c172code, c161sex)
m1 <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy, REML = F)
m2 <- lmer(Sepal.Length ~ Sepal.Width + Petal.Length + (1 | Species), data = iris)
m3 <- lm(neg_c_7 ~ e42dep + barthtot + c161sex, data = efc)
m4 <- glmmTMB(
count ~ spp + mined + (1 | site),
ziformula = ~ spp + mined,
family = truncated_nbinom2,
Salamanders
)
test_that("tab_model", {
p <- tab_model(m1, m2, m3)
})
test_that("tab_model", {
tab_model(m1, m2, m3, m4)
})
test_that("tab_model, check shows", {
p <- tab_model(m1, m2, m3, show.intercept = FALSE, show.fstat = TRUE, show.se = TRUE)
p <- tab_model(m1, m2, m3, show.intercept = FALSE, show.fstat = TRUE, show.se = TRUE, show.ci = F, show.df = TRUE, p.val = "kr")
})
test_that("tab_model, check terms", {
p <- tab_model(m1, m2, m3, show.intercept = FALSE, show.fstat = TRUE, show.se = TRUE, terms = c("Days", "Sepal.Width", "c161sex2", "barthtot"))
p <- tab_model(m1, m2, m3, show.intercept = FALSE, show.fstat = TRUE, show.se = TRUE, show.ci = F, show.df = TRUE, p.val = "kr", rm.terms = c("Days", "Sepal.Width", "c161sex2", "barthtot"))
p <- tab_model(m1, m2, m3, show.intercept = FALSE, show.fstat = TRUE, show.se = TRUE, show.ci = F, show.df = TRUE, rm.terms = c("Sepal.Width", "c161sex2", "barthtot"))
})
}
test_that("tab_model, rstan", {
p <- tab_model(m1)
p <- tab_model(m2)
p <- tab_model(m1, m2)
p <- tab_model(m1, m2, show.ci50 = FALSE)
p <- tab_model(m1, m2, col.order = c("ci.outer", "ci.inner", "est"))
p <- tab_model(m1, m2, bpe = "mean")
})
data(sleepstudy)
data(Salamanders)
data(iris)
data(efc)
efc <- to_factor(efc, e42dep, c172code, c161sex)
test_that("Linear regression", {lm(mpg ~ . , data = mtcars)})
test_that("Linear regression",{
p <- tab_model(lm)
})
reticulate::repl_python()
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home <- path.expand(path_home())
pw <- read.ini(paste0(home, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(pw$database$database)
host_db <- paste0(pw$dataset$host)
db_port <- paste0(pw$dataset$port)
db_user <- paste0(pw$dataset$username)
ssh_host <-  paste0(pw$dataset$ssh_host)
db_password <- pw$dataset$password
ssh_password <- paste0(pw$dataset$ssh_password)
con <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
# Step 1: Establish SSH Tunnel
home <- path.expand(path_home())
pw <- read.ini(paste0(home, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(pw$database$database)
host_db <- paste0(pw$dataset$host)
db_port <- paste0(pw$dataset$port)
db_user <- paste0(pw$dataset$username)
ssh_host <-  paste0(pw$dataset$ssh_host)
db_password <- pw$dataset$password
ssh_password <- paste0(pw$dataset$ssh_password)
con <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
database <- paste0(pw$database$database)
con <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
database <- paste0(pw$database$database)
database
database <- paste0(pw$dataset$database)
database
con <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
dbListTables(con)
post <- dbGetQuery(con, "SELECT title FROM blog_post")
head(post)
head(post, 20)
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home <- path.expand(path_home())
pw <- read.ini(paste0(home, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(pw$dataset$database)
host_db <- paste0(pw$dataset$host)
db_port <- paste0(pw$dataset$port)
db_user <- paste0(pw$dataset$username)
ssh_host <-  paste0(pw$dataset$ssh_host)
db_password <- pw$dataset$password
ssh_password <- paste0(pw$dataset$ssh_password)
#https://superuser.com/questions/1643961/how-can-i-connect-to-postgresql-database-on-a-server-through-an-ssh-tunnel-using
# ssh -i "~/.ssh/id_rsa" -L 5555:127.0.0.1:5432 fnn@104.236.11.136
ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
tunnel <- ssh_tunnel(session, port=5555, target=paste0(pw$dataset$host,':', pw$dataset$port))
con <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
con
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home <- path.expand(path_home())
pw <- read.ini(paste0(home, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(pw$dataset$database)
host_db <- paste0(pw$dataset$host)
db_port <- paste0(pw$dataset$port)
db_user <- paste0(pw$dataset$username)
ssh_host <-  paste0(pw$dataset$ssh_host)
db_password <- pw$dataset$password
ssh_password <- paste0(pw$dataset$ssh_password)
#https://superuser.com/questions/1643961/how-can-i-connect-to-postgresql-database-on-a-server-through-an-ssh-tunnel-using
# ssh -i "~/.ssh/id_rsa" -L 5555:127.0.0.1:5432 fnn@104.236.11.136
ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
tunnel <- ssh_tunnel(session, port=5555, target=paste0(pw$dataset$host,':', pw$dataset$port))
con <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
post <- dbGetQuery(con, "SELECT title FROM blog_post")
head(post, 20)
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home <- path.expand(path_home())
pw <- read.ini(paste0(home, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(pw$dataset$database)
host_db <- paste0(pw$dataset$host)
db_port <- paste0(pw$dataset$port)
db_user <- paste0(pw$dataset$username)
ssh_host <-  paste0(pw$dataset$ssh_host)
db_password <- pw$dataset$password
ssh_password <- paste0(pw$dataset$ssh_password)
#https://superuser.com/questions/1643961/how-can-i-connect-to-postgresql-database-on-a-server-through-an-ssh-tunnel-using
# ssh -i "~/.ssh/id_rsa" -L 5555:127.0.0.1:5432 fnn@104.236.11.136
ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
tunnel <- ssh_tunnel(session, port=5555, target=paste0(pw$dataset$host,':', pw$dataset$port))
con <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
post <- dbGetQuery(con, "SELECT title FROM blog_post")
head(post)
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home <- path.expand(path_home())
pw <- read.ini(paste0(home, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(pw$dataset$database)
host_db <- paste0(pw$dataset$host)
db_port <- paste0(pw$dataset$port)
db_user <- paste0(pw$dataset$username)
ssh_host <-  paste0(pw$dataset$ssh_host)
db_password <- pw$dataset$password
ssh_password <- paste0(pw$dataset$ssh_password)
#https://superuser.com/questions/1643961/how-can-i-connect-to-postgresql-database-on-a-server-through-an-ssh-tunnel-using
# ssh -i "~/.ssh/id_rsa" -L 5555:127.0.0.1:5432 fnn@104.236.11.136
ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
# session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
# tunnel <- ssh_tunnel(session, port=5555, target=paste0(pw$dataset$host,':', pw$dataset$port))
con <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
post <- dbGetQuery(con, "SELECT title FROM blog_post")
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home <- path.expand(path_home())
pw <- read.ini(paste0(home, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(pw$dataset$database)
host_db <- paste0(pw$dataset$host)
db_port <- paste0(pw$dataset$port)
db_user <- paste0(pw$dataset$username)
ssh_host <-  paste0(pw$dataset$ssh_host)
db_password <- pw$dataset$password
ssh_password <- paste0(pw$dataset$ssh_password)
#https://superuser.com/questions/1643961/how-can-i-connect-to-postgresql-database-on-a-server-through-an-ssh-tunnel-using
# ssh -i "~/.ssh/id_rsa" -L 5555:127.0.0.1:5432 fnn@104.236.11.136
ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
# session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
# tunnel <- ssh_tunnel(session, port=5555, target=paste0(pw$dataset$host,':', pw$dataset$port))
con <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
post <- dbGetQuery(con, "SELECT title FROM blog_post")
head(post)
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home <- path.expand(path_home())
pw <- read.ini(paste0(home, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(pw$dataset$database)
host_db <- paste0(pw$dataset$host)
db_port <- paste0(pw$dataset$port)
db_user <- paste0(pw$dataset$username)
ssh_host <-  paste0(pw$dataset$ssh_host)
db_password <- pw$dataset$password
ssh_password <- paste0(pw$dataset$ssh_password)
#https://superuser.com/questions/1643961/how-can-i-connect-to-postgresql-database-on-a-server-through-an-ssh-tunnel-using
# ssh -i "~/.ssh/id_rsa" -L 5555:127.0.0.1:5432 fnn@104.236.11.136
ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
tunnel <- ssh_tunnel(session, port=5555, target=paste0(pw$dataset$host,':', pw$dataset$port))
ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
tunnel <- ssh_tunnel(session, port=5555, target=paste0(pw$dataset$host,':', pw$dataset$port))
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home <- path.expand(path_home())
pw <- read.ini(paste0(home, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(pw$dataset$database)
host_db <- paste0(pw$dataset$host)
db_port <- paste0(pw$dataset$port)
db_user <- paste0(pw$dataset$username)
ssh_host <-  paste0(pw$dataset$ssh_host)
db_password <- pw$dataset$password
ssh_password <- paste0(pw$dataset$ssh_password)
#https://superuser.com/questions/1643961/how-can-i-connect-to-postgresql-database-on-a-server-through-an-ssh-tunnel-using
# ssh -i "~/.ssh/id_rsa" -L 5555:127.0.0.1:5432 fnn@104.236.11.136
ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
tunnel <- ssh_tunnel(session, port=5555, target=paste0(pw$dataset$host,':', pw$dataset$port))
on <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
post <- dbGetQuery(con, "SELECT title FROM blog_post")
con <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
post <- dbGetQuery(con, "SELECT title FROM blog_post")
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home <- path.expand(path_home())
pw <- read.ini(paste0(home, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(pw$dataset$database)
host_db <- paste0(pw$dataset$host)
db_port <- paste0(pw$dataset$port)
db_user <- paste0(pw$dataset$username)
ssh_host <-  paste0(pw$dataset$ssh_host)
db_password <- pw$dataset$password
ssh_password <- paste0(pw$dataset$ssh_password)
#https://superuser.com/questions/1643961/how-can-i-connect-to-postgresql-database-on-a-server-through-an-ssh-tunnel-using
# ssh -i "~/.ssh/id_rsa" -L 5555:127.0.0.1:5432 fnn@104.236.11.136
ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
tunnel <- ssh_tunnel(session, port=5555, target=paste0(pw$dataset$host,':', pw$dataset$port))
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home <- path.expand(path_home())
pw <- read.ini(paste0(home, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(pw$dataset$database)
host_db <- paste0(pw$dataset$host)
db_port <- paste0(pw$dataset$port)
db_user <- paste0(pw$dataset$username)
ssh_host <-  paste0(pw$dataset$ssh_host)
db_password <- pw$dataset$password
ssh_password <- paste0(pw$dataset$ssh_password)
#https://superuser.com/questions/1643961/how-can-i-connect-to-postgresql-database-on-a-server-through-an-ssh-tunnel-using
# ssh -i "~/.ssh/id_rsa" -L 5555:127.0.0.1:5432 fnn@104.236.11.136
# ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
# session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
# tunnel <- ssh_tunnel(session, port=5555, target=paste0(pw$dataset$host,':', pw$dataset$port))
# ssh_disconnect(session=session)
con <- dbConnect(RPostgres::Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
post <- dbGetQuery(con, "SELECT title FROM blog_post")
head(post)
table(post$title)
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home_path <- path.expand(path_home())
database_information <- read.ini(paste0(home_path, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(database_information$dataset$database)
host_db <- paste0(database_information$dataset$host)
db_port <- paste0(database_information$dataset$port)
db_user <- paste0(database_information$dataset$username)
ssh_host <-  paste0(database_information$dataset$ssh_host)
db_password <- database_information$dataset$password
ssh_password <- paste0(database_information$dataset$ssh_password)
#https://superuser.com/questions/1643961/how-can-i-connect-to-postgresql-database-on-a-server-through-an-ssh-tunnel-using
# ssh -i "~/.ssh/id_rsa" -L 5555:127.0.0.1:5432 fnn@104.236.11.136
# ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
# session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
# tunnel <- ssh_tunnel(session, port=5555, target=paste0(database_information$dataset$host,':', database_information$dataset$port))
# ssh_disconnect(session=session)
con <- dbConnect(Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
post <- dbGetQuery(con, "SELECT title FROM blog_post")
dput(names(post))
library(odbc)
library(DBI)
library(dplyr)
library(ini)
library(fs)
library("RPostgres")
library(ssh)
# Step 1: Establish SSH Tunnel
home_path <- path.expand(path_home())
database_information <- read.ini(paste0(home_path, "/db.ini"), encoding = getOption("encoding"))
database <- paste0(database_information$dataset$database)
host_db <- paste0(database_information$dataset$host)
db_port <- paste0(database_information$dataset$port)
db_user <- paste0(database_information$dataset$username)
ssh_host <-  paste0(database_information$dataset$ssh_host)
db_password <- database_information$dataset$password
ssh_password <- paste0(database_information$dataset$ssh_password)
#https://superuser.com/questions/1643961/how-can-i-connect-to-postgresql-database-on-a-server-through-an-ssh-tunnel-using
# ssh -i "~/.ssh/id_rsa" -L 5555:127.0.0.1:5432 fnn@104.236.11.136
# ssh_agent_add(paste0(path.expand(path_home()), "/.ssh/id_rsa"))
# session <- ssh_connect('fnn@104.236.11.136:22', keyfile = '~/.ssh/id_rsa', passwd =ssh_password)
# tunnel <- ssh_tunnel(session, port=5555, target=paste0(database_information$dataset$host,':', database_information$dataset$port))
# ssh_disconnect(session=session)
con <- dbConnect(Postgres(),
dbname = database,
host = host_db,
port = db_port,
user = db_user,
password = db_password
)
post <- dbGetQuery(con, "SELECT * FROM blog_post")
dput(names(post))
table(post$author_id)
tb <- table(post$title, post$view_count)
tb
names(tab)
head(tab)
tab[1:5]
tab <-as.data.frame(tab)
head(tab)
tb <- table(post$title, post$view_count)
tab <-as.data.frame(tab)
head(tab)
tab
tb <- table(post$title, post$view_count)
tab
tb <- table(post$view_count)
tab
tb
tb <- table(post$title, post$view_count)
tb <-as.data.frame(tb)
tb
names(tb)
head(tb)
tb <- tb[order(tb$Freq),]
head(tb)
tb <- tb[order(tb$Freq, desc),]
tb <- tb[order(-tb$Freq),]
head(tb)
tb <- post[, "title", "view_count")
tb <- post[, "title", "view_count"]
tb <- post[, c("title", "view_count")]
tb <- tb[order(-tb$Freq),]
tb <- tb[order(-tb$view_count),]
head(tb)
data <- c("Yellow", "YELLOW", "yellow", "green", "red", "RED", "reD", "greeN")
data2<-factor(gsub(("[:lower:]", "[A-Z]", data)
data2<-factor(gsub("[:lower:]", "[A-Z]", data))
data2
data2<-factor(gsub("([a-z])", toupper(), data))
data2<-factor(gsub("[:lower:]", "[:upper:]", data))
data2
data2<-factor(gsub("[:lower:]", "\\U\\l", data, perl=TRUE))
data2<-factor(gsub("[:lower:]", "\\U\\1", data, perl=TRUE))
print(mean(1:3))
print(mean(c(1,2,3))
)
print(mean(seq(1,3)))
sent <- read.csv("~/Downloads/Automotive_Industry/sentiment.csv")
View(sentiment)
head(sent)
values <- c(15, 22, NA, 5, 7, NA, 8)
#Which of the following R code snippets calculate the mean correctly?
mean(values, na.rm=T)
myMatrix <- matrix(c(1, 2, 3, 4, 5, 6), 2)
words = ['apple', 'banana', 'grape', 'pear']
reticulate::repl_python()
reticulate::source_python('~/Downloads/Untitled.py')
print([w[0].upper() for w in words])
reticulate::source_python('~/Downloads/Untitled.py')
reticulate::source_python('~/Downloads/Untitled.py')
reticulate::source_python('~/Downloads/Untitled.py')
reticulate::source_python('~/Downloads/Untitled.py')
reticulate::repl_python()
